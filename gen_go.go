package main

import (
	"flag"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

type goGenOptions struct {
	goCmdImportPath string
}

func genGo(req *pluginpb.CodeGeneratorRequest, config *cmdIdConfig) (*pluginpb.CodeGeneratorResponse, error) {
	genOptions := goGenOptions{}
	flags := flag.FlagSet{}
	flags.StringVar(&genOptions.goCmdImportPath, "go_cmd_import_path", "", "")

	err := config.writeFlags(&flags)
	if err != nil {
		return nil, err
	}

	plugin, err := protogen.Options{}.New(req)
	if err != nil {
		return nil, err
	}

	cmdPkg := protogen.GoImportPath(genOptions.goCmdImportPath)
	compilerVer := req.GetCompilerVersion()

	for _, f := range plugin.Files {
		if !f.Generate {
			continue
		}

		fileName := f.GeneratedFilenamePrefix + ".cmd.go"
		g := plugin.NewGeneratedFile(fileName, f.GoImportPath)

		// Header
		g.P("// Code generated by protoc-gen-cmdid. DO NOT EDIT.")
		g.P("// versions:")
		g.P("// \tprotoc-gen-cmdid v", Version)
		g.P("// \tprotoc           v", compilerVer.GetMajor(), ".", compilerVer.GetMinor(), ".", compilerVer.GetPatch())
		g.P("// source: ", f.Desc.Path())
		g.P()

		// Package
		g.P("package ", f.GoPackageName)
		g.P()

		if writeCount := writeGoMessages(config, cmdPkg, f.Messages, g); writeCount <= 0 {
			g.Skip()
		}
	}

	return plugin.Response(), nil
}

func writeGoMessages(config *cmdIdConfig, cmdPkg protogen.GoImportPath, messages []*protogen.Message, g *protogen.GeneratedFile) int {
	var (
		writeCount  = 0
		registerCmd = cmdPkg.Ident("RegisterCmd")
		cmdMessage  = cmdPkg.Ident("CmdMessage")
	)

	for _, msg := range messages {
		cmdId, ok := config.cmdIdMap[string(msg.Desc.FullName())]
		if !ok {
			continue
		}
		writeCount++

		msgName := msg.GoIdent.GoName

		g.P("const (")
		g.P("    ", msgName, "_CmdId uint16 = ", cmdId)
		g.P("    ", msgName, "_CmdName string = \"", msgName, "\"")
		g.P(")")
		g.P()
		g.P("func (cmd *", msgName, ") CmdId() uint16 { return ", msgName, "_CmdId }")
		g.P("func (cmd *", msgName, ") CmdName() string { return ", msgName, "_CmdName }")
		g.P("func init() { ", registerCmd, "(func() ", cmdMessage, " { return new(", msgName, ") }) }")
		g.P()

		writeCount += writeGoMessages(config, cmdPkg, msg.Messages, g)
	}

	return writeCount
}
