package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

type goGenerator struct {
	protocmdPkg     protogen.GoImportPath
	registerIdent   protogen.GoIdent
	cmdMessageIdent protogen.GoIdent
	compilerVer     string
	typesInFile     []string
}

func init() {
	registerLangGenerator(&goGenerator{})
}

func (*goGenerator) langName() string {
	return "go"
}

func (gen *goGenerator) initGenerator(context *generateContext) {
	gen.protocmdPkg = "github.com/stalomeow/protocmd"
	gen.registerIdent = gen.protocmdPkg.Ident("Register")
	gen.cmdMessageIdent = gen.protocmdPkg.Ident("CmdMessage")

	comVer := context.req.GetCompilerVersion()
	gen.compilerVer = fmt.Sprintf("%v.%v.%v", comVer.GetMajor(), comVer.GetMinor(), comVer.GetPatch())
}

func (gen *goGenerator) generate(context *generateContext) error {
	plugin, err := protogen.Options{}.New(context.req)
	if err != nil {
		return err
	}

	gen.initGenerator(context)

	for _, f := range plugin.Files {
		if !f.Generate {
			continue
		}

		fileName := f.GeneratedFilenamePrefix + ".cmd.go"
		gf := plugin.NewGeneratedFile(fileName, f.GoImportPath)
		gen.writeFileHeader(f, gf)

		gen.typesInFile = make([]string, 0)
		gen.writeMsg(context, f.Messages, gf)

		if len(gen.typesInFile) <= 0 {
			gf.Skip()
			continue
		}

		gen.writeInitFunc(gf)
	}

	context.rsp = plugin.Response()
	return nil
}

func (gen *goGenerator) writeFileHeader(f *protogen.File, gf *protogen.GeneratedFile) {
	gf.P("// Code generated by protoc-gen-cmdid. DO NOT EDIT.")
	gf.P("// versions:")
	gf.P("// \tprotoc-gen-cmdid v", genVersion)
	gf.P("// \tprotoc           v", gen.compilerVer)
	gf.P("// source: ", f.Desc.Path())
	gf.P()
	gf.P("package ", f.GoPackageName)
	gf.P()
}

func (gen *goGenerator) writeMsg(context *generateContext, messages []*protogen.Message, gf *protogen.GeneratedFile) {
	for _, msg := range messages {
		cmdId, ok := context.config.CmdIdMap[string(msg.Desc.FullName())]
		if !ok {
			continue
		}

		msgName := msg.GoIdent.GoName
		gen.typesInFile = append(gen.typesInFile, msgName)

		gf.P("const (")
		gf.P("    ", msgName, "_CmdId uint16 = ", cmdId)
		gf.P("    ", msgName, "_CmdName string = \"", msgName, "\"")
		gf.P(")")
		gf.P()
		gf.P("func (*", msgName, ") CmdId() uint16 { return ", msgName, "_CmdId }")
		gf.P("func (*", msgName, ") CmdName() string { return ", msgName, "_CmdName }")
		gf.P()

		gen.writeMsg(context, msg.Messages, gf)
	}
}

func (gen *goGenerator) writeInitFunc(gf *protogen.GeneratedFile) {
	gf.P("func init() {")
	for _, t := range gen.typesInFile {
		gf.P("    ", gen.registerIdent, "(func() ", gen.cmdMessageIdent, " { return new(", t, ") })")
	}
	gf.P("}")
}
